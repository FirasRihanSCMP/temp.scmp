{"ast":null,"code":"import React__default, { memo, createElement, forwardRef, useState, useCallback } from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar MONTHS = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December'\n};\n\nvar getMonthNameFromNumber = function getMonthNameFromNumber(month) {\n  if (month < 0 || month > 11) {\n    throw new Error(\"Invalid month number: \" + month);\n  }\n\n  return MONTHS[month];\n};\n\nvar getDatesOfMonth = function getDatesOfMonth(date) {\n  // generate dates of each week of the month including the residue dates\n  // of the last week of previous month and first week of next month\n  var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  var lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n  var firstDayOfMonthWeekDay = firstDayOfMonth.getDay();\n  var lastDayOfMonthWeekDay = lastDayOfMonth.getDay();\n  var previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);\n  var previousMonthLastDay = new Date(previousMonth.getFullYear(), previousMonth.getMonth() + 1, 0);\n  var nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);\n  var dates = [];\n\n  for (var i = 0; i < firstDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(previousMonth.getFullYear(), previousMonth.getMonth(), previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1),\n      active: false\n    });\n  }\n\n  for (var _i = 0; _i < lastDayOfMonth.getDate(); _i++) {\n    dates.push({\n      d: new Date(date.getFullYear(), date.getMonth(), _i + 1),\n      active: true\n    });\n  }\n\n  for (var _i2 = 0; _i2 < 6 - lastDayOfMonthWeekDay; _i2++) {\n    dates.push({\n      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), _i2 + 1),\n      active: false\n    });\n  }\n\n  return dates;\n};\n\nvar MonthPicker = function MonthPicker(_ref) {\n  var month = _ref.month,\n      year = _ref.year,\n      nextMonth = _ref.nextMonth,\n      prevMonth = _ref.prevMonth;\n  return React__default.createElement(\"div\", {\n    className: \"sdp--month-picker\"\n  }, React__default.createElement(\"button\", {\n    className: \"sdp--square-btn sdp--square-btn__shadowed\",\n    onClick: prevMonth,\n    \"aria-label\": \"Go to previous month\",\n    type: \"button\"\n  }, React__default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 256 256\"\n  }, React__default.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), React__default.createElement(\"polyline\", {\n    points: \"160 208 80 128 160 48\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }))), React__default.createElement(\"p\", {\n    className: \"sdp--text sdp--month-name\",\n    \"aria-label\": getMonthNameFromNumber(month) + \" \" + year + \" is currently open in Date Picker\",\n    tabIndex: 0\n  }, getMonthNameFromNumber(month), \" \", year), React__default.createElement(\"button\", {\n    className: \"sdp--square-btn sdp--square-btn__shadowed\",\n    onClick: nextMonth,\n    \"aria-label\": \"Go to next month\",\n    type: \"button\"\n  }, React__default.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 256 256\"\n  }, React__default.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), React__default.createElement(\"polyline\", {\n    points: \"96 48 176 128 96 208\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }))));\n};\n\nvar dateOptions = {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric'\n};\n\nvar DateButton = function DateButton(_ref) {\n  var date = _ref.date,\n      active = _ref.active,\n      _onClick = _ref.onClick,\n      selected = _ref.selected;\n  return createElement(\"button\", {\n    className: \"sdp--square-btn sdp--date-btn \" + (selected ? 'sdp--date-btn__selected' : '') + \" sdp--text \" + (!active ? 'sdp--text__inactive' : ''),\n    onClick: function onClick() {\n      return _onClick(date);\n    },\n    tabIndex: active ? 0 : -1,\n    \"aria-label\": (selected ? 'Currently selected' : 'Select') + \" \" + date.toLocaleDateString('en-US', dateOptions),\n    type: \"button\"\n  }, date.getDate());\n};\n\nvar DateButton$1 = /*#__PURE__*/memo(DateButton, function (p, n) {\n  return p.date.getDay() === n.date.getDay() && p.active === n.active && p.selected === n.selected;\n});\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".sdp{--font:inherit,-apple-system,\\\"Segoe UI\\\",Ubuntu,\\\"Helvetica Neue\\\",sans-serif;--shadow:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 1px 3px 0px,rgba(0,0,0,.06) 0px 1px 2px 0px;--shadow-md:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 4px 6px -1px,rgba(0,0,0,.06) 0px 2px 4px -1px;--theme-color:#60a5fa;--selected-date-color:#fff;background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);padding:.75rem;width:16rem}.sdp--month-name:focus,.sdp--square-btn:focus,.sdp:focus{box-shadow:0 0 0 2px #60a5fab3;outline:none}.sdp--month-name{border:none;border-radius:.5rem;padding:.5rem}.sdp--text{font-family:var(--font);font-weight:500;margin:0}.sdp--text__inactive{color:#bdbdbd;pointer-events:none}.sdp--square-btn{align-items:center;background-color:#fff;border:none;border-radius:.5rem;cursor:pointer;display:flex;font-family:var(--font);height:1.8rem;justify-content:center;transition:all .2s ease-in-out;width:1.8rem}.sdp--square-btn:focus:hover{box-shadow:none}.sdp--square-btn__shadowed,.sdp--square-btn__shadowed:focus:hover{box-shadow:var(--shadow)}.sdp--date-btn__selected{background-color:var(--theme-color);box-shadow:var(--shadow);color:var(--selected-date-color)}.sdp--date-btn__selected.sdp--square-btn:focus{box-shadow:var(--shadow)}.sdp--month-picker{align-items:center;display:flex;justify-content:space-between}.sdp--dates-grid{display:grid;gap:4px;grid-template-columns:repeat(7,1fr);justify-items:center;margin:.5rem 0 0}.sdp--dates-grid>p{padding:.5rem 0}\";\nstyleInject(css_248z);\nvar _excluded = [\"onChange\", \"selected\", \"minDate\", \"maxDate\", \"className\"];\nvar DatePicker = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var onChange = _ref.onChange,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? new Date() : _ref$selected,\n      _ref$minDate = _ref.minDate,\n      minDate = _ref$minDate === void 0 ? new Date(1900, 0, 1) : _ref$minDate,\n      maxDate = _ref.maxDate,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var minDateVal = minDate.getTime();\n  var maxDateVal = typeof maxDate === 'undefined' ? Number.POSITIVE_INFINITY : maxDate.getTime();\n\n  var _React$useState = useState(selected),\n      monthDate = _React$useState[0],\n      setMonthDate = _React$useState[1];\n\n  var _React$useState2 = useState(selected),\n      selectedDate = _React$useState2[0],\n      setSelectedDate = _React$useState2[1];\n\n  var nextMonth = useCallback(function () {\n    return setMonthDate(function (d) {\n      var m = d.getMonth();\n      var y = d.getFullYear();\n\n      if (m === 11) {\n        return new Date(y + 1, 0);\n      } else {\n        return new Date(y, m + 1);\n      }\n    });\n  }, [monthDate]);\n  var prevMonth = useCallback(function () {\n    return setMonthDate(function (d) {\n      var m = d.getMonth();\n      var y = d.getFullYear();\n\n      if (m === 0) {\n        return new Date(y - 1, 11);\n      } else {\n        return new Date(y, m - 1);\n      }\n    });\n  }, [monthDate]);\n\n  var setNewSelectedDate = function setNewSelectedDate(date) {\n    setSelectedDate(date);\n    onChange == null ? void 0 : onChange(date);\n  };\n\n  if (process.env.NODE_ENV !== 'production' && (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)) {\n    console.warn('Selected date must fall in the range of maxDate and minDate');\n  }\n\n  return createElement(\"div\", Object.assign({\n    className: \"sdp \" + className,\n    \"aria-label\": \"Date Picker\",\n    tabIndex: 0,\n    ref: ref\n  }, props), createElement(MonthPicker, {\n    month: monthDate.getMonth(),\n    year: monthDate.getFullYear(),\n    nextMonth: nextMonth,\n    prevMonth: prevMonth\n  }), createElement(\"div\", {\n    className: \"sdp--dates-grid\"\n  }, createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Su\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Mo\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Tu\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"We\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Th\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Fr\"), createElement(\"p\", {\n    className: \"sdp--text sdp--text__inactive\"\n  }, \"Sa\"), getDatesOfMonth(monthDate).map(function (_ref2) {\n    var d = _ref2.d,\n        active = _ref2.active;\n    var dVal = d.getTime();\n    return createElement(DateButton$1, {\n      key: dVal,\n      date: d,\n      active: dVal >= minDateVal && dVal <= maxDateVal && active,\n      selected: selectedDate.toDateString() === d.toDateString(),\n      onClick: setNewSelectedDate\n    });\n  })));\n});\nexport default DatePicker;","map":{"version":3,"sources":["../src/util.ts","../src/month-picker.tsx","../src/date-button.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/date-picker.tsx"],"names":["MONTHS","getMonthNameFromNumber","month","getDatesOfMonth","firstDayOfMonth","date","lastDayOfMonth","firstDayOfMonthWeekDay","lastDayOfMonthWeekDay","previousMonth","previousMonthLastDay","nextMonth","dates","i","d","active","MonthPicker","year","prevMonth","className","onClick","type","xmlns","width","height","fill","viewBox","points","stroke","strokeLinecap","strokeLinejoin","strokeWidth","tabIndex","dateOptions","weekday","day","DateButton","selected","p","n","DatePicker","onChange","minDate","maxDate","props","minDateVal","maxDateVal","Number","monthDate","setMonthDate","React","selectedDate","setSelectedDate","m","y","setNewSelectedDate","process","console","ref","dVal","key"],"mappings":"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","sourcesContent":["const MONTHS: { [key: number]: string } = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December',\n};\n\nexport const getMonthNameFromNumber = (month: number): string => {\n  if (month < 0 || month > 11) {\n    throw new Error(`Invalid month number: ${month}`);\n  }\n  return MONTHS[month];\n};\n\nexport const getDatesOfMonth = (date: Date): { d: Date; active: boolean }[] => {\n  // generate dates of each week of the month including the residue dates\n  // of the last week of previous month and first week of next month\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  const firstDayOfMonthWeekDay = firstDayOfMonth.getDay();\n  const lastDayOfMonthWeekDay = lastDayOfMonth.getDay();\n\n  const previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);\n  const previousMonthLastDay = new Date(\n    previousMonth.getFullYear(),\n    previousMonth.getMonth() + 1,\n    0\n  );\n\n  const nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);\n\n  const dates: { d: Date; active: boolean }[] = [];\n\n  for (let i = 0; i < firstDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(\n        previousMonth.getFullYear(),\n        previousMonth.getMonth(),\n        previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1\n      ),\n      active: false,\n    });\n  }\n\n  for (let i = 0; i < lastDayOfMonth.getDate(); i++) {\n    dates.push({\n      d: new Date(date.getFullYear(), date.getMonth(), i + 1),\n      active: true,\n    });\n  }\n\n  for (let i = 0; i < 6 - lastDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), i + 1),\n      active: false,\n    });\n  }\n\n  return dates;\n};\n","import React from 'react';\nimport { getMonthNameFromNumber } from './util';\n\nexport type MonthPickerProps = {\n  month: number;\n  year: number;\n  nextMonth: () => void;\n  prevMonth: () => void;\n};\n\nconst MonthPicker: React.FC<MonthPickerProps> = ({\n  month,\n  year,\n  nextMonth,\n  prevMonth,\n}) => {\n  return (\n    <div className=\"sdp--month-picker\">\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={prevMonth}\n        aria-label=\"Go to previous month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"160 208 80 128 160 48\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n      <p\n        className=\"sdp--text sdp--month-name\"\n        aria-label={`${getMonthNameFromNumber(\n          month\n        )} ${year} is currently open in Date Picker`}\n        tabIndex={0}\n      >\n        {getMonthNameFromNumber(month)} {year}\n      </p>\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={nextMonth}\n        aria-label=\"Go to next month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"96 48 176 128 96 208\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nexport default MonthPicker;\n","import * as React from 'react';\n\ntype DateButtonProps = {\n  date: Date;\n  active: boolean;\n  selected: boolean;\n  onClick: (date: Date) => void;\n};\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst DateButton: React.FC<DateButtonProps> = ({\n  date,\n  active,\n  onClick,\n  selected,\n}) => (\n  <button\n    className={`sdp--square-btn sdp--date-btn ${\n      selected ? 'sdp--date-btn__selected' : ''\n    } sdp--text ${!active ? 'sdp--text__inactive' : ''}`}\n    onClick={() => onClick(date)}\n    tabIndex={active ? 0 : -1}\n    aria-label={`${\n      selected ? 'Currently selected' : 'Select'\n    } ${date.toLocaleDateString('en-US', dateOptions)}`}\n    type=\"button\"\n  >\n    {date.getDate()}\n  </button>\n);\n\nexport default React.memo(\n  DateButton,\n  (p, n) =>\n    p.date.getDay() === n.date.getDay() &&\n    p.active === n.active &&\n    p.selected === n.selected\n);\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import * as React from 'react';\n\nimport MonthPicker from './month-picker';\nimport DateButton from './date-button';\nimport { getDatesOfMonth } from './util';\nimport './styles.css';\n\nexport type DatePickerProps = {\n  /**\n   * This function is called when the selected date is changed.\n   */\n  onChange?: (date: Date) => void;\n  /**\n   * The selected date.\n   */\n  selected?: Date;\n  /**\n   * The minimum date that can be selected (inclusive).\n   */\n  minDate?: Date;\n  /**\n   * The maximum date that can be selected (inclusive).\n   */\n  maxDate?: Date;\n} & React.PropsWithRef<\n  Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'selected'>\n>;\n\nconst DatePicker = React.forwardRef<HTMLDivElement, DatePickerProps>(\n  (\n    {\n      onChange,\n      selected = new Date(),\n      minDate = new Date(1900, 0, 1),\n      maxDate,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const minDateVal = minDate.getTime();\n    const maxDateVal =\n      typeof maxDate === 'undefined'\n        ? Number.POSITIVE_INFINITY\n        : maxDate.getTime();\n\n    const [monthDate, setMonthDate] = React.useState<Date>(selected);\n    const [selectedDate, setSelectedDate] = React.useState<Date>(selected);\n\n    const nextMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 11) {\n            return new Date(y + 1, 0);\n          } else {\n            return new Date(y, m + 1);\n          }\n        }),\n      [monthDate]\n    );\n\n    const prevMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 0) {\n            return new Date(y - 1, 11);\n          } else {\n            return new Date(y, m - 1);\n          }\n        }),\n      [monthDate]\n    );\n\n    const setNewSelectedDate = (date: Date) => {\n      setSelectedDate(date);\n      onChange?.(date);\n    };\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)\n    ) {\n      console.warn(\n        'Selected date must fall in the range of maxDate and minDate'\n      );\n    }\n\n    return (\n      <div\n        className={`sdp ${className}`}\n        aria-label=\"Date Picker\"\n        tabIndex={0}\n        ref={ref}\n        {...props}\n      >\n        <MonthPicker\n          month={monthDate.getMonth()}\n          year={monthDate.getFullYear()}\n          nextMonth={nextMonth}\n          prevMonth={prevMonth}\n        />\n        <div className=\"sdp--dates-grid\">\n          <p className=\"sdp--text sdp--text__inactive\">Su</p>\n          <p className=\"sdp--text sdp--text__inactive\">Mo</p>\n          <p className=\"sdp--text sdp--text__inactive\">Tu</p>\n          <p className=\"sdp--text sdp--text__inactive\">We</p>\n          <p className=\"sdp--text sdp--text__inactive\">Th</p>\n          <p className=\"sdp--text sdp--text__inactive\">Fr</p>\n          <p className=\"sdp--text sdp--text__inactive\">Sa</p>\n          {getDatesOfMonth(monthDate).map(({ d, active }) => {\n            const dVal = d.getTime();\n\n            return (\n              <DateButton\n                key={dVal}\n                date={d}\n                active={dVal >= minDateVal && dVal <= maxDateVal && active}\n                selected={selectedDate.toDateString() === d.toDateString()}\n                onClick={setNewSelectedDate}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default DatePicker;\n"]},"metadata":{},"sourceType":"module"}